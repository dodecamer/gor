/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */
plugins {
    id 'gor.java-library'
    id 'gor.java-application'
    id 'antlr'
    id 'gor.scala-common'
}

project(':gortools') {

    generateGrammarSource {
        arguments += ["-visitor"]
    }

    sourceSets.main.scala.srcDirs file("${projectDir}/build/generated-src/antlr/main")

    dependencies {
        implementation project(':model')
        implementation project(':base')
        implementation project(':util')

        // scala-parser-combinators must be present at compile time for callers so it's defined as an api dependency
        api "org.scala-lang.modules:scala-parser-combinators_${scalaVersion}:_"

        implementation "org.freemarker:freemarker:_"
        implementation "org.yaml:snakeyaml:_"
        implementation "commons-io:commons-io:_"
        implementation "org.apache.commons:commons-lang3:_"

        implementation "com.fasterxml.jackson.core:jackson-databind:_"
        implementation "org.scalanlp:breeze_${scalaVersion}:_"
        implementation "colt:colt:_"
        implementation "com.github.samtools:htsjdk:_"
        implementation "org.aeonbits.owner:owner:_"
        implementation "ch.qos.logback:logback-classic:_"
        implementation "io.prometheus:simpleclient:_"
        implementation 'org.apache.parquet:parquet-common:_'
        implementation 'org.apache.parquet:parquet-column:_'
        implementation 'org.apache.parquet:parquet-hadoop:_'
        implementation ('org.apache.hadoop:hadoop-common:_')

        runtimeOnly project(':drivers')

        runtimeOnly "org.scala-lang:scala-reflect:_"
        runtimeOnly "org.apache.hadoop:hadoop-mapreduce-client-core:_"

        testImplementation project(':test')
        testImplementation project(':util')

        testImplementation Testing.mockito.core
        testImplementation "org.scalatest:scalatest_${scalaVersion}:_"
        testImplementation "org.scalacheck:scalacheck_${scalaVersion}:_"
        testImplementation "org.scalatest:scalatest-funsuite_${scalaVersion}:_"
        testImplementation "org.scalatestplus:junit-4-13_${scalaVersion}:_"
        testImplementation "org.scalatestplus:mockito-3-4_${scalaVersion}:_"
        testImplementation 'com.github.stefanbirkner:system-rules:_'

        testRuntimeOnly "org.apache.derby:derby:_"
        testRuntimeOnly "org.apache.derby:derbytools:_"

        antlr("org.antlr:antlr4:_")
    }

    // Tests

    // Run scala tests. These are not automatically picked up by gradle,
    // so we run them like this.
    task testScala(dependsOn: ['testClasses'], type: JavaExec) {
        systemProperty 'logback.configurationFile', new File("${project.rootDir}/tests/config/logback-test.xml").absolutePath
        mainClass = 'org.scalatest.tools.Runner'
        args = ['-R', 'build/classes/scala/test', '-o']

        classpath = sourceSets.test.runtimeClasspath
    }
}

